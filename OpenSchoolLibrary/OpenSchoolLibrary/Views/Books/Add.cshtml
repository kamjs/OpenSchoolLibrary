@model OpenSchoolLibrary.Models.BooksViewModels.AddBookViewModel

@{
    ViewBag.Title = "Add a Book";
}

<h2>@ViewBag.Title</h2>
<hr />

<form class="isbncheck" action="/books/isbncheck" method="get" >
    @Html.AntiForgeryToken()
    <div class="form-horizontal">

        <div class="form-group">
            <div class="control-label col-md-2">
                <label>ISBN:</label>
            </div>
            <div class="col-md-10">
                <input type="text" name="ISBN" pattern="[0-9]{9}[0-9X]" placeholder="Only one is required." class="form-control">
                <div class="ISBNError text-danger"></div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-2">
                <label>ISBN 13:</label>
            </div>
            <div class="col-md-10">
                <input type="text" name="ISBN13" pattern="97[89][0-9]{10}" placeholder="Only one is required." class="form-control">
                <div class="ISBN13Error text-danger"></div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Check" class="btn btn-default" />
            </div>
        </div>

    </div>
</form>

<form class="incrementbook" action="/books/incrementbook" method="post">
    @Html.AntiForgeryToken()
</form>

<form class="add-book hidden" action="/books/add" method="post">
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
            <div class="form-group">
                <div class="control-label col-md-2">
                    <label>Title:</label>
                </div>
                <div class="col-md-10">
                    <input type="text" name="Title" class="form-control" required placeholder="Title is Required.">
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-md-2">
                    <label>Subtitle:</label>
                </div>
                <div class="col-md-10">
                    <input type="text" name="SubTitle" class="form-control">
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-md-2">
                    <label>Author:</label>
                </div>
                <div class="col-md-10">
                    <input type="text" name="Author" class="form-control" required placeholder="Author is Required.">
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Condition, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("Condition", EnumHelper.GetSelectList(typeof(OpenSchoolLibrary.Controllers.BooksController.BookConditions)), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Condition, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="control-label col-md-2">
                    <label>Catalog ID:</label>
                </div>
                <div class="col-md-10">
                    <input type="text" name="CatalogID" class="form-control">
                </div>
            </div>
            <div class="form-group">
                <div class="control-label col-md-2">
                    <label>Genre:</label>
                </div>
                <div class="col-md-10">
                    <select name="Genre" class="form-control">
                        @foreach (var item in Model.GenreList)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
</form>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">

    document.addEventListener("DOMContentLoaded", function (event) {
        console.log("DOM fully loaded and parsed");

        console.log("@Model.Entry");

        if ("@Model.Entry" == "Add") {
            document.querySelector('.add-book').classList.remove("hidden");
        }

    document.querySelector('.isbncheck').addEventListener('submit', (ev) => {
        console.log("isbn entry");
        var isbn = document.querySelector("input[name=ISBN]");
        var isbn13 = document.querySelector("input[name=ISBN13]");
        var isbnPattern = new RegExp("[0-9]{9}[0-9X]");
        var isbn13Pattern = new RegExp("97[89][0-9]{10}");

        document.querySelector('.ISBNError').textContent = "";
        document.querySelector('.ISBN13Error').textContent = "";

        if (!isbn.value.length == 0) {
            if (!isbnPattern.test(isbn.value)) {
                document.querySelector('.ISBNError').textContent = "ISBN not valid. Use numbers only or X at the end.";
                isbn.focus();

                console.log("ISBN Pattern Fail");
                ev.preventDefault();
            }
        }

        if (!isbn13.value.length == 0) {
            if (!isbn13Pattern.test(isbn13.value)) {
                document.querySelector('.ISBN13Error').textContent = "ISBN 13 not valid. Use numbers only.";
                isbn13.focus();

                console.log("ISBN 13 Pattern Fail");
                ev.preventDefault();
            }
        }

        if (isbn.value.length == 0 && isbn13.value.length == 0) {
            document.querySelector('.ISBNError').textContent = "Both fields cannot be Blank.";
            document.querySelector('.ISBN13Error').textContent = "Both fields cannot be Blank.";

            console.log("ISBN & ISBN13 are Blank.");
            isbn.focus();
            ev.preventDefault();
        }

        });

    });

</script>